{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pynteny is a Python package to query sequence databases for synteny blocks through Hidden Markov Models (HMMs). It can be run in a command line interface or through a graphical interface. The command line tool is more complete and is intended to be employed in remote servers. In contrast, the graphical interface runs locally and may be easier to handle for some users (also intended for educational purposes). These are the available subcommands, run as pynteny <subcommand> <options> : search build download parse tests app General usage Pynteny's main subcommand, pynteny search , requires a peptide (ORF) sequence database in fasta format in which record labels contain positional information of each sequence with respect to their contig of origin. Additionally, labels must follow the following format: <genome ID>_<contig ID>_<gene position>_<locus start>_<locus end>_<strand> To facilitate the construction of this database, Pynteny provides the subcommand pynteny build , which takes as input a fasta file containing assembled nucleotide sequence data (or a single or a collection of genomes), such as that retrieved from MAG reconstruction pipelines. Additionally, pynteny search requires either the set of profile Hidden Markov Models (HMMs) used in the provided synteny structure or a database of profile HMMs from which to retrieve the necessary HMMs. The user may provide their own set of HMMs. However, the user may also download the entire PGAP HMM database through pynteny download , which will take care of downloading and storing the download path for future usage (by default any time no additional HMMs are provided as an argument in pynteny search ). Once both the peptide database and the required HMMs are ready, the user can query the peptide database with a text string encoding the query synteny structure such as the following: \\(>HMM_a \\\\:\\\\: n_{ab} \\\\:\\\\: > (HMM_{b1} | HMM_{b2}) \\\\:\\\\: n_{bc} \\\\:\\\\: < HMM_c.\\) Where \\(HMM_a\\) represents the name of the HMM to be used (corresponding to the file name without the extension), \\(n_{ab}\\) is an integer representing the maximum number of genes between HMMs a and b, < and > indicate the strand in which to search for the HMM pattern, antisense and sense, respectively. Note that more than one HMM can be employed for a single gene in the structure, as indicated by the HMM group \\((HMM_{b1} | HMM_{b2})\\) above. In these cases, pynteny search will search for sequences that matched any HMM contained within the HMM group. Examples There are some Jupyter notebooks with examples of how to use Pynteny's command-line interface as well as its Python API. Check them out here ! Citation If you use this software, please cite it as below: Semid\u00e1n Robaina Est\u00e9vez. (2022). Pynteny: synteny-aware hmm searches made easy(Version 0.0.2). Zenodo. https://doi.org/10.5281/zenodo.7048685","title":"Home"},{"location":"#general-usage","text":"Pynteny's main subcommand, pynteny search , requires a peptide (ORF) sequence database in fasta format in which record labels contain positional information of each sequence with respect to their contig of origin. Additionally, labels must follow the following format: <genome ID>_<contig ID>_<gene position>_<locus start>_<locus end>_<strand> To facilitate the construction of this database, Pynteny provides the subcommand pynteny build , which takes as input a fasta file containing assembled nucleotide sequence data (or a single or a collection of genomes), such as that retrieved from MAG reconstruction pipelines. Additionally, pynteny search requires either the set of profile Hidden Markov Models (HMMs) used in the provided synteny structure or a database of profile HMMs from which to retrieve the necessary HMMs. The user may provide their own set of HMMs. However, the user may also download the entire PGAP HMM database through pynteny download , which will take care of downloading and storing the download path for future usage (by default any time no additional HMMs are provided as an argument in pynteny search ). Once both the peptide database and the required HMMs are ready, the user can query the peptide database with a text string encoding the query synteny structure such as the following: \\(>HMM_a \\\\:\\\\: n_{ab} \\\\:\\\\: > (HMM_{b1} | HMM_{b2}) \\\\:\\\\: n_{bc} \\\\:\\\\: < HMM_c.\\) Where \\(HMM_a\\) represents the name of the HMM to be used (corresponding to the file name without the extension), \\(n_{ab}\\) is an integer representing the maximum number of genes between HMMs a and b, < and > indicate the strand in which to search for the HMM pattern, antisense and sense, respectively. Note that more than one HMM can be employed for a single gene in the structure, as indicated by the HMM group \\((HMM_{b1} | HMM_{b2})\\) above. In these cases, pynteny search will search for sequences that matched any HMM contained within the HMM group.","title":"General usage"},{"location":"#examples","text":"There are some Jupyter notebooks with examples of how to use Pynteny's command-line interface as well as its Python API. Check them out here !","title":"Examples"},{"location":"#citation","text":"If you use this software, please cite it as below: Semid\u00e1n Robaina Est\u00e9vez. (2022). Pynteny: synteny-aware hmm searches made easy(Version 0.0.2). Zenodo. https://doi.org/10.5281/zenodo.7048685","title":"Citation"},{"location":"app/","text":"Description Run Pynteny as a local app in the web browser. Usage: usage: pynteny app [-h] Arguments short long default help -h --help show this help message and exit","title":"Description"},{"location":"app/#description","text":"Run Pynteny as a local app in the web browser.","title":"Description"},{"location":"app/#usage","text":"usage: pynteny app [-h]","title":"Usage:"},{"location":"app/#arguments","text":"short long default help -h --help show this help message and exit","title":"Arguments"},{"location":"build/","text":"Translate assembly sequence data and assign positional metadata to labels Usage usage: pynteny build [-h] [args] Arguments short long default help -h --help show this help message and exit -i --data None path to assembly input nucleotide data or annotated GenBank file. It can be a single file or a directory of files (either of FASTA or GeneBank format). -o --outfile None path to output (labeled peptide database) file. Defaults to file in the directory of input data. -n --processes None set the maximum number of processes. Defaults to all but one. -l --log None path to log file. Log not written by default. Description Translate nucleotide assembly file and assign contig and gene location info to each identified ORF (using prodigal ). Label predicted ORFs according to positional info and export a fasta file containing predicted and translated ORFs. Alternatively, extract peptide sequences from GenBank file containing ORF annotations and write labeled peptide sequences to a fasta file.","title":"Build"},{"location":"build/#usage","text":"usage: pynteny build [-h] [args]","title":"Usage"},{"location":"build/#arguments","text":"short long default help -h --help show this help message and exit -i --data None path to assembly input nucleotide data or annotated GenBank file. It can be a single file or a directory of files (either of FASTA or GeneBank format). -o --outfile None path to output (labeled peptide database) file. Defaults to file in the directory of input data. -n --processes None set the maximum number of processes. Defaults to all but one. -l --log None path to log file. Log not written by default.","title":"Arguments"},{"location":"build/#description","text":"Translate nucleotide assembly file and assign contig and gene location info to each identified ORF (using prodigal ). Label predicted ORFs according to positional info and export a fasta file containing predicted and translated ORFs. Alternatively, extract peptide sequences from GenBank file containing ORF annotations and write labeled peptide sequences to a fasta file.","title":"Description"},{"location":"download/","text":"Download PGAP's HMM database from NCBI. Usage: usage: pynteny download [-h] [args] Arguments short long default help -h --help show this help message and exit -o --outdir None path to the directory where to download HMM database. Defaults to pynteny's installation directory. -u --unpack unpack originally compressed database files -l --log None path to log file. Log not written by default. Description download the latest version of the NCBI Prokaryotic Genome Annotation Pipeline (PGAP) HMM database. Users may provide their own HMM database in the search subcommand.","title":"Download"},{"location":"download/#usage","text":"usage: pynteny download [-h] [args]","title":"Usage:"},{"location":"download/#arguments","text":"short long default help -h --help show this help message and exit -o --outdir None path to the directory where to download HMM database. Defaults to pynteny's installation directory. -u --unpack unpack originally compressed database files -l --log None path to log file. Log not written by default.","title":"Arguments"},{"location":"download/#description","text":"download the latest version of the NCBI Prokaryotic Genome Annotation Pipeline (PGAP) HMM database. Users may provide their own HMM database in the search subcommand.","title":"Description"},{"location":"parse/","text":"Description Translate synteny structure with gene symbols into one with HMM groups, according to provided HMM database. Usage: usage: pynteny parse [-h] [args] Arguments short long default help -h --help show this help message and exit -s --synteny_struc None synteny structure containing gene symbols instead of HMMs -m --hmm_meta None path to hmm database metadata file. If already downloaded with pynteny download, hmm meta file is retrieved from the default location. -l --log None path to log file. Log not written by default.","title":"Description"},{"location":"parse/#description","text":"Translate synteny structure with gene symbols into one with HMM groups, according to provided HMM database.","title":"Description"},{"location":"parse/#usage","text":"usage: pynteny parse [-h] [args]","title":"Usage:"},{"location":"parse/#arguments","text":"short long default help -h --help show this help message and exit -s --synteny_struc None synteny structure containing gene symbols instead of HMMs -m --hmm_meta None path to hmm database metadata file. If already downloaded with pynteny download, hmm meta file is retrieved from the default location. -l --log None path to log file. Log not written by default.","title":"Arguments"},{"location":"search/","text":"Query sequence database for HMM hits arranged in provided synteny structure. Usage usage: pynteny search [-h] [args] Arguments short long default help -h --help show this help message and exit -s --synteny_struc None string displaying hmm structure to search for, such as: '>hmm_a n_ab ' indicates a hmm target located on the positive strand, '<' a target located on the negative strand, and n_ab corresponds to the maximum number of genes separating matched genes a and b. Multiple hmms may be employed. No order symbol in a hmm indicates that results should be independent of strand location. -i --data None path to peptide database -d --hmm_dir None path to directory containing hmm (i.e, tigrfam or pfam) models. The directory can contain more hmm models than used in the synteny structure. It may also be the path to a compressed (tar, tar.gz, tgz) directory. If not provided, hmm models (PGAP database) will be downloaded from the NCBI. (if not already downloaded) -o --outdir None path to output directory -x --prefix `` prefix to be added to output files -p --processes None maximum number of processes available to HMMER. Defaults to all but one. -a --hmmsearch_args None list of comma-separated additional arguments to hmmsearch for each input hmm. A single argument may be provided, in which case the same additional argument is employed in all hmms. -g --gene_ids use gene symbols in synteny structure instead of HMM names. If set, a path to the hmm database metadata file must be provided in argument '--hmm_meta' -u --unordered whether the HMMs should be arranged in the exact same order displayed in the synteny_structure or in any order. If ordered, the filters will filter collinear rather than syntenic structures. If more than two HMMs are employed, the largest maximum distance among any pair is considered to run the search. -r --reuse reuse hmmsearch result table in following synteny searches. Do not delete hmmer_outputs subdirectory for this option to work. -m --hmm_meta None path to hmm database metadata file -l --log None path to log file. Log not written by default. Description Search for synteny blocks in a set of ORFs using HMMER and outputs the results in a tabular format. Synteny blocks are specified by strings of ordered HMM names or gene IDs with the following format: \\[\\lt HMM_a \\space n_{ab} \\space \\lt HMM_b \\space n_{bc} \\space \\lt(HMM_{c1}|HMM_{c2}|HMM_{c3}),\\] where \\(n_{ab}\\) corresponds to the maximum number of genes between \\(HMM_a\\) and \\(HMM_b\\) . Results can be strand-specific, in that case, \\(>\\) preceding an HMM name indicates that the corresponding ORF must be located in the positive (or sense) strand. Likewise, a \\(<\\) symbol indicates that the ORF must be located in the negative (antisense) strand. Searches can be made strand-insensitive by omitting the \\(>\\) or \\(<\\) symbol. Several HMMs can be assigned to the same ORF, in which case the search is performed for all of them. In this case, HMM names must be separated by \"|\" and grouped within parentheses, as shown above. If the PGAP database is employed (see pynteny download below), synteny blocks can also be specified by gene symbols, such as \\( \\(\\lt leuD \\space 0 \\space \\lt leuC \\space 1 \\space \\lt leuA.\\) \\) In that case, the program will try to match gene symbols to HMM names in the PGAP database before running the search.","title":"Search"},{"location":"search/#usage","text":"usage: pynteny search [-h] [args]","title":"Usage"},{"location":"search/#arguments","text":"short long default help -h --help show this help message and exit -s --synteny_struc None string displaying hmm structure to search for, such as: '>hmm_a n_ab ' indicates a hmm target located on the positive strand, '<' a target located on the negative strand, and n_ab corresponds to the maximum number of genes separating matched genes a and b. Multiple hmms may be employed. No order symbol in a hmm indicates that results should be independent of strand location. -i --data None path to peptide database -d --hmm_dir None path to directory containing hmm (i.e, tigrfam or pfam) models. The directory can contain more hmm models than used in the synteny structure. It may also be the path to a compressed (tar, tar.gz, tgz) directory. If not provided, hmm models (PGAP database) will be downloaded from the NCBI. (if not already downloaded) -o --outdir None path to output directory -x --prefix `` prefix to be added to output files -p --processes None maximum number of processes available to HMMER. Defaults to all but one. -a --hmmsearch_args None list of comma-separated additional arguments to hmmsearch for each input hmm. A single argument may be provided, in which case the same additional argument is employed in all hmms. -g --gene_ids use gene symbols in synteny structure instead of HMM names. If set, a path to the hmm database metadata file must be provided in argument '--hmm_meta' -u --unordered whether the HMMs should be arranged in the exact same order displayed in the synteny_structure or in any order. If ordered, the filters will filter collinear rather than syntenic structures. If more than two HMMs are employed, the largest maximum distance among any pair is considered to run the search. -r --reuse reuse hmmsearch result table in following synteny searches. Do not delete hmmer_outputs subdirectory for this option to work. -m --hmm_meta None path to hmm database metadata file -l --log None path to log file. Log not written by default.","title":"Arguments"},{"location":"search/#description","text":"Search for synteny blocks in a set of ORFs using HMMER and outputs the results in a tabular format. Synteny blocks are specified by strings of ordered HMM names or gene IDs with the following format: \\[\\lt HMM_a \\space n_{ab} \\space \\lt HMM_b \\space n_{bc} \\space \\lt(HMM_{c1}|HMM_{c2}|HMM_{c3}),\\] where \\(n_{ab}\\) corresponds to the maximum number of genes between \\(HMM_a\\) and \\(HMM_b\\) . Results can be strand-specific, in that case, \\(>\\) preceding an HMM name indicates that the corresponding ORF must be located in the positive (or sense) strand. Likewise, a \\(<\\) symbol indicates that the ORF must be located in the negative (antisense) strand. Searches can be made strand-insensitive by omitting the \\(>\\) or \\(<\\) symbol. Several HMMs can be assigned to the same ORF, in which case the search is performed for all of them. In this case, HMM names must be separated by \"|\" and grouped within parentheses, as shown above. If the PGAP database is employed (see pynteny download below), synteny blocks can also be specified by gene symbols, such as \\( \\(\\lt leuD \\space 0 \\space \\lt leuC \\space 1 \\space \\lt leuA.\\) \\) In that case, the program will try to match gene symbols to HMM names in the PGAP database before running the search.","title":"Description"},{"location":"tests/","text":"Description Run Pynteny unit and integration tests. Usage: usage: pynteny tests [-h] Arguments short long default help -h --help show this help message and exit","title":"Description"},{"location":"tests/#description","text":"Run Pynteny unit and integration tests.","title":"Description"},{"location":"tests/#usage","text":"usage: pynteny tests [-h]","title":"Usage:"},{"location":"tests/#arguments","text":"short long default help -h --help show this help message and exit","title":"Arguments"}]}